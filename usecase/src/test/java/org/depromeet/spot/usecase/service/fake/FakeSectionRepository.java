package org.depromeet.spot.usecase.service.fake;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import org.depromeet.spot.common.exception.section.SectionException.SectionNotFoundException;
import org.depromeet.spot.domain.section.Section;
import org.depromeet.spot.usecase.port.out.section.SectionRepository;

public class FakeSectionRepository implements SectionRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Section> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<Section> findAllByStadium(Long stadiumId) {
        return data.stream().filter(section -> section.getStadiumId().equals(stadiumId)).toList();
    }

    @Override
    public Section save(Section section) {
        if (section.getId() == null || section.getId() == 0) {
            Section newSection =
                    Section.builder()
                            .id(autoGeneratedId.incrementAndGet())
                            .stadiumId(section.getStadiumId())
                            .name(section.getName())
                            .alias(section.getAlias())
                            .build();
            data.add(newSection);
            return newSection;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), section.getId()));
            data.add(section);
            return section;
        }
    }

    @Override
    public void saveAll(List<Section> sections) {
        sections.forEach(this::save);
    }

    @Override
    public boolean existsInStadium(Long stadiumId, Long sectionId) {
        return data.stream()
                .filter(section -> section.getStadiumId().equals(sectionId))
                .anyMatch(section -> section.getId().equals(sectionId));
    }

    @Override
    public Section findById(Long id) {
        return getById(id).orElseThrow(SectionNotFoundException::new);
    }

    private Optional<Section> getById(Long id) {
        return data.stream().filter(section -> section.getId().equals(id)).findAny();
    }
}
