package org.depromeet.spot.usecase.service.fake;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import org.depromeet.spot.domain.block.Block;
import org.depromeet.spot.domain.block.BlockRow;
import org.depromeet.spot.usecase.port.out.block.BlockRepository;

public class FakeBlockRepository implements BlockRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Block> blockData = Collections.synchronizedList(new ArrayList<>());
    private final List<BlockRow> rowData = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<Block> findAllBySection(Long sectionId) {
        return blockData.stream().filter(b -> b.getSectionId().equals(sectionId)).toList();
    }

    @Override
    public Map<Block, List<BlockRow>> findRowInfosBy(Long sectionId) {
        return rowData.stream().collect(Collectors.groupingBy(BlockRow::getBlock));
    }
}
