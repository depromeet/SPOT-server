package org.depromeet.spot.usecase.service.fake;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import org.depromeet.spot.domain.review.Review;
import org.depromeet.spot.domain.review.ReviewYearMonth;
import org.depromeet.spot.usecase.port.in.review.ReadReviewUsecase.LocationInfo;
import org.depromeet.spot.usecase.port.out.review.ReviewRepository;

public class FakeReviewRepository implements ReviewRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Review> data = new ArrayList<>();

    @Override
    public List<Review> findByStadiumIdAndBlockCode(
            Long stadiumId,
            String blockCode,
            Integer rowNumber,
            Integer seatNumber,
            Integer year,
            Integer month,
            Long cursor,
            Integer size) {
        return data.stream()
                .filter(
                        review ->
                                review.getStadium().getId().equals(stadiumId)
                                        && review.getBlock().getCode().equals(blockCode))
                .filter(
                        review ->
                                rowNumber == null || review.getRow().getNumber().equals(rowNumber))
                .filter(
                        review ->
                                seatNumber == null
                                        || review.getSeat().getSeatNumber().equals(seatNumber))
                .filter(review -> year == null || review.getDateTime().getYear() == year)
                .filter(review -> month == null || review.getDateTime().getMonthValue() == month)
                .filter(review -> review.getId() > cursor)
                .sorted(Comparator.comparing(Review::getId))
                .limit(size)
                .collect(Collectors.toList());
    }

    @Override
    public List<Review> findAllByUserId(
            Long userId, Integer year, Integer month, Long cursor, Integer size) {
        return data.stream()
                .filter(review -> review.getMember().getId().equals(userId))
                .filter(review -> year == null || review.getDateTime().getYear() == year)
                .filter(review -> month == null || review.getDateTime().getMonthValue() == month)
                .filter(review -> review.getId() > cursor)
                .sorted(Comparator.comparing(Review::getId))
                .limit(size)
                .collect(Collectors.toList());
    }

    @Override
    public List<ReviewYearMonth> findReviewMonthsByMemberId(Long memberId) {
        return data.stream()
                .filter(review -> review.getMember().getId().equals(memberId))
                .map(
                        review ->
                                new ReviewYearMonth(
                                        review.getDateTime().getYear(),
                                        review.getDateTime().getMonthValue()))
                .distinct()
                .sorted(
                        Comparator.comparing(ReviewYearMonth::year)
                                .reversed()
                                .thenComparing(ReviewYearMonth::month)
                                .reversed())
                .collect(Collectors.toList());
    }

    @Override
    public Long softDeleteByIdAndMemberId(Long reviewId, Long memberId) {
        return data.stream()
                .filter(
                        review ->
                                review.getId().equals(reviewId)
                                        && review.getMember().getId().equals(memberId))
                .findFirst()
                .map(
                        review -> {
                            review.setDeletedAt(LocalDateTime.now());
                            return reviewId;
                        })
                .orElse(0L);
    }

    @Override
    public Review save(Review review) {
        if (review.getId() == null || review.getId() == 0) {
            Review newReview =
                    Review.builder()
                            .id(autoGeneratedId.incrementAndGet())
                            .member(review.getMember())
                            .stadium(review.getStadium())
                            .section(review.getSection())
                            .block(review.getBlock())
                            .row(review.getRow())
                            .seat(review.getSeat())
                            .dateTime(review.getDateTime())
                            .content(review.getContent())
                            .deletedAt(review.getDeletedAt())
                            .images(review.getImages())
                            .keywords(review.getKeywords())
                            .build();
            data.add(newReview);
            return newReview;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), review.getId()));
            data.add(review);
            return review;
        }
    }

    @Override
    public Optional<Review> findById(Long id) {
        return data.stream().filter(review -> review.getId().equals(id)).findFirst();
    }

    @Override
    public long countByUserId(Long userId) {
        return data.stream().filter(review -> review.getMember().getId().equals(userId)).count();
    }

    @Override
    public LocationInfo findLocationInfoByStadiumIdAndBlockCode(Long stadiumId, String blockCode) {
        return data.stream()
                .filter(
                        review ->
                                review.getStadium().getId().equals(stadiumId)
                                        && review.getBlock().getCode().equals(blockCode))
                .findFirst()
                .map(
                        review ->
                                new LocationInfo(
                                        review.getStadium().getName(),
                                        review.getSection().getName(),
                                        review.getBlock().getCode()))
                .orElse(null);
    }

    @Override
    public Review findLastReviewByMemberId(Long memberId) {
        return data.stream()
                .filter(review -> review.getMember().getId().equals(memberId))
                .max(Comparator.comparing(Review::getDateTime))
                .orElse(null);
    }

    @Override
    public long countByIdByMemberId(Long memberId) {
        return data.stream().filter(review -> review.getMember().getId().equals(memberId)).count();
    }

    public void clear() {
        data.clear();
    }
}
