// package org.depromeet.spot.usecase.service.fake;
//
// import java.util.*;
// import java.util.concurrent.atomic.AtomicLong;
// import java.util.stream.Collectors;
//
// import org.depromeet.spot.domain.review.Review;
// import org.depromeet.spot.domain.review.ReviewYearMonth;
// import org.depromeet.spot.usecase.port.out.review.ReviewRepository;
// import org.springframework.data.domain.Page;
// import org.springframework.data.domain.PageImpl;
// import org.springframework.data.domain.Pageable;
//
// public class FakeReviewRepository implements ReviewRepository {
//
//    private final AtomicLong autoGeneratedId = new AtomicLong(0);
//    private final List<Review> data = new ArrayList<>();
//
//    @Override
//    public Page<Review> findByStadiumIdAndBlockCode(
//            Long stadiumId,
//            String blockCode,
//            Integer rowNumber,
//            Integer seatNumber,
//            Integer year,
//            Integer month,
//            Pageable pageable) {
//        List<Review> filteredReviews =
//                data.stream()
//                        .filter(
//                                review ->
//                                        review.getStadium().getId().equals(stadiumId)
//                                                && review.getBlock().getCode().equals(blockCode))
//                        .filter(
//                                review ->
//                                        rowNumber == null
//                                                || review.getRow().getNumber().equals(rowNumber))
//                        .filter(
//                                review ->
//                                        seatNumber == null
//                                                || review.getSeat()
//                                                        .getSeatNumber()
//                                                        .equals(seatNumber))
//                        .filter(review -> year == null || review.getDateTime().getYear() == year)
//                        .filter(
//                                review ->
//                                        month == null
//                                                || review.getDateTime().getMonthValue() == month)
//                        .collect(Collectors.toList());
//
//        int start = (int) pageable.getOffset();
//        int end = Math.min((start + pageable.getPageSize()), filteredReviews.size());
//
//        List<Review> pageContent = filteredReviews.subList(start, end);
//        return new PageImpl<>(pageContent, pageable, filteredReviews.size());
//    }
//
//    @Override
//    public Page<Review> findByUserId(Long userId, Integer year, Integer month, Pageable pageable)
// {
//        List<Review> filteredReviews =
//                data.stream()
//                        .filter(review -> review.getMember().getId().equals(userId))
//                        .filter(review -> year == null || review.getDateTime().getYear() == year)
//                        .filter(
//                                review ->
//                                        month == null
//                                                || review.getDateTime().getMonthValue() == month)
//                        .collect(Collectors.toList());
//
//        int start = (int) pageable.getOffset();
//        int end = Math.min((start + pageable.getPageSize()), filteredReviews.size());
//
//        List<Review> pageContent = filteredReviews.subList(start, end);
//        return new PageImpl<>(pageContent, pageable, filteredReviews.size());
//    }
//
//    @Override
//    public List<ReviewYearMonth> findReviewMonthsByMemberId(Long memberId) {
//        return data.stream()
//                .filter(review -> review.getMember().getId().equals(memberId))
//                .map(
//                        review ->
//                                new ReviewYearMonth(
//                                        review.getDateTime().getYear(),
//                                        review.getDateTime().getMonthValue()))
//                .distinct()
//                .sorted(
//                        Comparator.comparing(ReviewYearMonth::year)
//                                .reversed()
//                                .thenComparing(ReviewYearMonth::month)
//                                .reversed())
//                .collect(Collectors.toList());
//    }
//
//    @Override
//    public Review save(Review review) {
//        if (review.getId() == null || review.getId() == 0) {
//            Review newReview =
//                    Review.builder()
//                            .id(autoGeneratedId.incrementAndGet())
//                            .member(review.getMember())
//                            .stadium(review.getStadium())
//                            .section(review.getSection())
//                            .block(review.getBlock())
//                            .row(review.getRow())
//                            .seat(review.getSeat())
//                            .dateTime(review.getDateTime())
//                            .content(review.getContent())
//                            .deletedAt(review.getDeletedAt())
//                            .images(review.getImages())
//                            .keywords(review.getKeywords())
//                            .build();
//            data.add(newReview);
//            return newReview;
//        } else {
//            data.removeIf(item -> Objects.equals(item.getId(), review.getId()));
//            data.add(review);
//            return review;
//        }
//    }
//
//    @Override
//    public long countByMemberId(Long memberId) {
//        return data.stream().filter(review ->
// review.getMember().getId().equals(memberId)).count();
//    }
//
//    public void clear() {
//        data.clear();
//    }
// }
