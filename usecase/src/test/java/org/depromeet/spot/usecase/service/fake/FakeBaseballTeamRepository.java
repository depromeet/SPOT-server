package org.depromeet.spot.usecase.service.fake;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import org.depromeet.spot.common.exception.team.TeamException.BaseballTeamNotFoundException;
import org.depromeet.spot.domain.stadium.Stadium;
import org.depromeet.spot.domain.team.BaseballTeam;
import org.depromeet.spot.usecase.port.out.team.BaseballTeamRepository;

public class FakeBaseballTeamRepository implements BaseballTeamRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<BaseballTeam> data = Collections.synchronizedList(new ArrayList<>());
    private final Map<Stadium, List<BaseballTeam>> homeTeamMap =
            Collections.synchronizedMap(new HashMap<>());

    @Override
    public BaseballTeam findById(Long id) {
        return getById(id).orElseThrow(BaseballTeamNotFoundException::new);
    }

    private Optional<BaseballTeam> getById(Long id) {
        return data.stream().filter(team -> team.getId().equals(id)).findAny();
    }

    @Override
    public List<BaseballTeam> findAll() {
        return data;
    }

    @Override
    public List<BaseballTeam> findAllHomeTeamByStadium(Long stadiumId) {
        return homeTeamMap.entrySet().stream()
                .filter(entry -> stadiumId.equals(entry.getKey().getId()))
                .flatMap(entry -> entry.getValue().stream())
                .collect(Collectors.toList());
    }

    @Override
    public Map<Stadium, List<BaseballTeam>> findAllStadiumHomeTeam() {
        return homeTeamMap;
    }

    public BaseballTeam save(BaseballTeam team) {
        if (team.getId() == null || team.getId() == 0) {
            BaseballTeam newTeam =
                    BaseballTeam.builder()
                            .id(autoGeneratedId.incrementAndGet())
                            .name(team.getName())
                            .alias(team.getAlias())
                            .logo(team.getLogo())
                            .labelRgbCode(team.getLabelRgbCode())
                            .build();
            data.add(newTeam);
            return newTeam;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), team.getId()));
            data.add(team);
            return team;
        }
    }

    @Override
    public void saveAll(List<BaseballTeam> teams) {
        teams.forEach(this::save);
    }

    @Override
    public void createHomeTeam(Long stadiumId, List<Long> teamIds) {
        Stadium stadium = Stadium.builder().id(stadiumId).build();
        List<BaseballTeam> newTeams =
                teamIds.stream().map(t -> BaseballTeam.builder().id(t).build()).toList();

        homeTeamMap.merge(
                stadium,
                newTeams,
                (existingTeams, teams) -> {
                    existingTeams.addAll(teams);
                    return existingTeams;
                });
    }

    @Override
    public boolean existsByNameIn(List<String> names) {
        return data.stream().map(BaseballTeam::getName).anyMatch(names::contains);
    }
}
