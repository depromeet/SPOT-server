package org.depromeet.spot.usecase.service.fake;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

import org.depromeet.spot.domain.review.like.ReviewLike;
import org.depromeet.spot.usecase.port.out.review.ReviewLikeRepository;

public class FakeReviewLikeRepository implements ReviewLikeRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<ReviewLike> likeData = Collections.synchronizedList(new ArrayList<>());

    @Override
    public boolean existsBy(long memberId, long reviewId) {
        return likeData.stream()
                .anyMatch(
                        like ->
                                like.getMemberId().equals(memberId)
                                        && like.getReviewId().equals(reviewId));
    }

    @Override
    public long countByReview(long reviewId) {
        return likeData.stream()
                .filter(like -> like.getReviewId().equals(reviewId))
                .toList()
                .size();
    }

    @Override
    public void deleteBy(long memberId, long reviewId) {
        likeData.removeIf(
                like -> like.getReviewId().equals(reviewId) && like.getMemberId().equals(memberId));
    }

    @Override
    public void save(ReviewLike like) {
        if (like.getId() == null || like.getId() == 0) {
            ReviewLike newLike =
                    ReviewLike.builder()
                            .id(autoGeneratedId.incrementAndGet())
                            .reviewId(like.getReviewId())
                            .memberId(like.getMemberId())
                            .build();
            likeData.add(newLike);
        } else {
            likeData.removeIf(item -> Objects.equals(item.getId(), like.getId()));
            likeData.add(like);
        }
    }

    @Override
    public Map<Long, Boolean> existsByMemberIdAndReviewIds(Long memberId, List<Long> reviewIds) {
        return null;
    }
}
